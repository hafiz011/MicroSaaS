// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/Grpc.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Microservice.Session.Protos {
  public static partial class Grpc
  {
    static readonly string __ServiceName = "Grpc";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.Session.Protos.ApiKeyRequest> __Marshaller_ApiKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.Session.Protos.ApiKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.Session.Protos.ApiKeyResponse> __Marshaller_ApiKeyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.Session.Protos.ApiKeyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.Session.Protos.CreateApiKeyRequest> __Marshaller_CreateApiKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.Session.Protos.CreateApiKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.Session.Protos.ApiHashResponse> __Marshaller_ApiHashResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.Session.Protos.ApiHashResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.Session.Protos.RenewApiKeyRequest> __Marshaller_RenewApiKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.Session.Protos.RenewApiKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.Session.Protos.UserInfoRequest> __Marshaller_UserInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.Session.Protos.UserInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.Session.Protos.UserInfoResponse> __Marshaller_UserInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.Session.Protos.UserInfoResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Microservice.Session.Protos.ApiKeyRequest, global::Microservice.Session.Protos.ApiKeyResponse> __Method_GetApiKey = new grpc::Method<global::Microservice.Session.Protos.ApiKeyRequest, global::Microservice.Session.Protos.ApiKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetApiKey",
        __Marshaller_ApiKeyRequest,
        __Marshaller_ApiKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Microservice.Session.Protos.CreateApiKeyRequest, global::Microservice.Session.Protos.ApiHashResponse> __Method_CreateApiKey = new grpc::Method<global::Microservice.Session.Protos.CreateApiKeyRequest, global::Microservice.Session.Protos.ApiHashResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateApiKey",
        __Marshaller_CreateApiKeyRequest,
        __Marshaller_ApiHashResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Microservice.Session.Protos.ApiKeyRequest, global::Microservice.Session.Protos.ApiHashResponse> __Method_RegenerateApiKey = new grpc::Method<global::Microservice.Session.Protos.ApiKeyRequest, global::Microservice.Session.Protos.ApiHashResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegenerateApiKey",
        __Marshaller_ApiKeyRequest,
        __Marshaller_ApiHashResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Microservice.Session.Protos.RenewApiKeyRequest, global::Microservice.Session.Protos.ApiKeyResponse> __Method_RenewApiKey = new grpc::Method<global::Microservice.Session.Protos.RenewApiKeyRequest, global::Microservice.Session.Protos.ApiKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RenewApiKey",
        __Marshaller_RenewApiKeyRequest,
        __Marshaller_ApiKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Microservice.Session.Protos.ApiKeyRequest, global::Microservice.Session.Protos.ApiKeyResponse> __Method_RevokeApiKey = new grpc::Method<global::Microservice.Session.Protos.ApiKeyRequest, global::Microservice.Session.Protos.ApiKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RevokeApiKey",
        __Marshaller_ApiKeyRequest,
        __Marshaller_ApiKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Microservice.Session.Protos.UserInfoRequest, global::Microservice.Session.Protos.UserInfoResponse> __Method_GetUserInfo = new grpc::Method<global::Microservice.Session.Protos.UserInfoRequest, global::Microservice.Session.Protos.UserInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserInfo",
        __Marshaller_UserInfoRequest,
        __Marshaller_UserInfoResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Microservice.Session.Protos.GrpcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Grpc</summary>
    [grpc::BindServiceMethod(typeof(Grpc), "BindService")]
    public abstract partial class GrpcBase
    {
      /// <summary>
      /// api key
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Microservice.Session.Protos.ApiKeyResponse> GetApiKey(global::Microservice.Session.Protos.ApiKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Microservice.Session.Protos.ApiHashResponse> CreateApiKey(global::Microservice.Session.Protos.CreateApiKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Microservice.Session.Protos.ApiHashResponse> RegenerateApiKey(global::Microservice.Session.Protos.ApiKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Microservice.Session.Protos.ApiKeyResponse> RenewApiKey(global::Microservice.Session.Protos.RenewApiKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Microservice.Session.Protos.ApiKeyResponse> RevokeApiKey(global::Microservice.Session.Protos.ApiKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// user info
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Microservice.Session.Protos.UserInfoResponse> GetUserInfo(global::Microservice.Session.Protos.UserInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(GrpcBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetApiKey, serviceImpl.GetApiKey)
          .AddMethod(__Method_CreateApiKey, serviceImpl.CreateApiKey)
          .AddMethod(__Method_RegenerateApiKey, serviceImpl.RegenerateApiKey)
          .AddMethod(__Method_RenewApiKey, serviceImpl.RenewApiKey)
          .AddMethod(__Method_RevokeApiKey, serviceImpl.RevokeApiKey)
          .AddMethod(__Method_GetUserInfo, serviceImpl.GetUserInfo).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GrpcBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetApiKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Microservice.Session.Protos.ApiKeyRequest, global::Microservice.Session.Protos.ApiKeyResponse>(serviceImpl.GetApiKey));
      serviceBinder.AddMethod(__Method_CreateApiKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Microservice.Session.Protos.CreateApiKeyRequest, global::Microservice.Session.Protos.ApiHashResponse>(serviceImpl.CreateApiKey));
      serviceBinder.AddMethod(__Method_RegenerateApiKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Microservice.Session.Protos.ApiKeyRequest, global::Microservice.Session.Protos.ApiHashResponse>(serviceImpl.RegenerateApiKey));
      serviceBinder.AddMethod(__Method_RenewApiKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Microservice.Session.Protos.RenewApiKeyRequest, global::Microservice.Session.Protos.ApiKeyResponse>(serviceImpl.RenewApiKey));
      serviceBinder.AddMethod(__Method_RevokeApiKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Microservice.Session.Protos.ApiKeyRequest, global::Microservice.Session.Protos.ApiKeyResponse>(serviceImpl.RevokeApiKey));
      serviceBinder.AddMethod(__Method_GetUserInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Microservice.Session.Protos.UserInfoRequest, global::Microservice.Session.Protos.UserInfoResponse>(serviceImpl.GetUserInfo));
    }

  }
}
#endregion

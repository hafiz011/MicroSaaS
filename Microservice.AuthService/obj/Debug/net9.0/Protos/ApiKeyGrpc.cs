// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/ApiKey.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Microservice.AuthService.Protos {
  public static partial class ApiKey
  {
    static readonly string __ServiceName = "ApiKey";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.AuthService.Protos.ApiKeyRequest> __Marshaller_ApiKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.AuthService.Protos.ApiKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.AuthService.Protos.ApiKeyResponse> __Marshaller_ApiKeyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.AuthService.Protos.ApiKeyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.AuthService.Protos.CreateApiKeyRequest> __Marshaller_CreateApiKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.AuthService.Protos.CreateApiKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.AuthService.Protos.ApiHashResponse> __Marshaller_ApiHashResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.AuthService.Protos.ApiHashResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.AuthService.Protos.RenewApiKeyRequest> __Marshaller_RenewApiKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.AuthService.Protos.RenewApiKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.AuthService.Protos.UserInfoRequest> __Marshaller_UserInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.AuthService.Protos.UserInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.AuthService.Protos.UserInfoResponse> __Marshaller_UserInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.AuthService.Protos.UserInfoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.AuthService.Protos.SessionListRequest> __Marshaller_SessionListRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.AuthService.Protos.SessionListRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.AuthService.Protos.SessionListResponse> __Marshaller_SessionListResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.AuthService.Protos.SessionListResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.AuthService.Protos.SessionCheckRequest> __Marshaller_SessionCheckRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.AuthService.Protos.SessionCheckRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.AuthService.Protos.SessionCheckResponce> __Marshaller_SessionCheckResponce = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.AuthService.Protos.SessionCheckResponce.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.AuthService.Protos.SessionDetailsRequest> __Marshaller_SessionDetailsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.AuthService.Protos.SessionDetailsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.AuthService.Protos.SessionDetailsResponse> __Marshaller_SessionDetailsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.AuthService.Protos.SessionDetailsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Microservice.AuthService.Protos.SessionAnalyticsResponse> __Marshaller_SessionAnalyticsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Microservice.AuthService.Protos.SessionAnalyticsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Microservice.AuthService.Protos.ApiKeyRequest, global::Microservice.AuthService.Protos.ApiKeyResponse> __Method_GetApiKey = new grpc::Method<global::Microservice.AuthService.Protos.ApiKeyRequest, global::Microservice.AuthService.Protos.ApiKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetApiKey",
        __Marshaller_ApiKeyRequest,
        __Marshaller_ApiKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Microservice.AuthService.Protos.CreateApiKeyRequest, global::Microservice.AuthService.Protos.ApiHashResponse> __Method_CreateApiKey = new grpc::Method<global::Microservice.AuthService.Protos.CreateApiKeyRequest, global::Microservice.AuthService.Protos.ApiHashResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateApiKey",
        __Marshaller_CreateApiKeyRequest,
        __Marshaller_ApiHashResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Microservice.AuthService.Protos.ApiKeyRequest, global::Microservice.AuthService.Protos.ApiHashResponse> __Method_RegenerateApiKey = new grpc::Method<global::Microservice.AuthService.Protos.ApiKeyRequest, global::Microservice.AuthService.Protos.ApiHashResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegenerateApiKey",
        __Marshaller_ApiKeyRequest,
        __Marshaller_ApiHashResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Microservice.AuthService.Protos.RenewApiKeyRequest, global::Microservice.AuthService.Protos.ApiKeyResponse> __Method_RenewApiKey = new grpc::Method<global::Microservice.AuthService.Protos.RenewApiKeyRequest, global::Microservice.AuthService.Protos.ApiKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RenewApiKey",
        __Marshaller_RenewApiKeyRequest,
        __Marshaller_ApiKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Microservice.AuthService.Protos.ApiKeyRequest, global::Microservice.AuthService.Protos.ApiKeyResponse> __Method_RevokeApiKey = new grpc::Method<global::Microservice.AuthService.Protos.ApiKeyRequest, global::Microservice.AuthService.Protos.ApiKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RevokeApiKey",
        __Marshaller_ApiKeyRequest,
        __Marshaller_ApiKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Microservice.AuthService.Protos.UserInfoRequest, global::Microservice.AuthService.Protos.UserInfoResponse> __Method_GetUserInfo = new grpc::Method<global::Microservice.AuthService.Protos.UserInfoRequest, global::Microservice.AuthService.Protos.UserInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserInfo",
        __Marshaller_UserInfoRequest,
        __Marshaller_UserInfoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Microservice.AuthService.Protos.SessionListRequest, global::Microservice.AuthService.Protos.SessionListResponse> __Method_GetSessionList = new grpc::Method<global::Microservice.AuthService.Protos.SessionListRequest, global::Microservice.AuthService.Protos.SessionListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSessionList",
        __Marshaller_SessionListRequest,
        __Marshaller_SessionListResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Microservice.AuthService.Protos.SessionCheckRequest, global::Microservice.AuthService.Protos.SessionCheckResponce> __Method_SessionListCheck = new grpc::Method<global::Microservice.AuthService.Protos.SessionCheckRequest, global::Microservice.AuthService.Protos.SessionCheckResponce>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SessionListCheck",
        __Marshaller_SessionCheckRequest,
        __Marshaller_SessionCheckResponce);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Microservice.AuthService.Protos.SessionDetailsRequest, global::Microservice.AuthService.Protos.SessionDetailsResponse> __Method_GetSessionDetails = new grpc::Method<global::Microservice.AuthService.Protos.SessionDetailsRequest, global::Microservice.AuthService.Protos.SessionDetailsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSessionDetails",
        __Marshaller_SessionDetailsRequest,
        __Marshaller_SessionDetailsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Microservice.AuthService.Protos.SessionListRequest, global::Microservice.AuthService.Protos.SessionAnalyticsResponse> __Method_GetSessionAnalytics = new grpc::Method<global::Microservice.AuthService.Protos.SessionListRequest, global::Microservice.AuthService.Protos.SessionAnalyticsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSessionAnalytics",
        __Marshaller_SessionListRequest,
        __Marshaller_SessionAnalyticsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Microservice.AuthService.Protos.ApiKeyReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for ApiKey</summary>
    public partial class ApiKeyClient : grpc::ClientBase<ApiKeyClient>
    {
      /// <summary>Creates a new client for ApiKey</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ApiKeyClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ApiKey that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ApiKeyClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ApiKeyClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ApiKeyClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// api key
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.ApiKeyResponse GetApiKey(global::Microservice.AuthService.Protos.ApiKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApiKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// api key
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.ApiKeyResponse GetApiKey(global::Microservice.AuthService.Protos.ApiKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetApiKey, null, options, request);
      }
      /// <summary>
      /// api key
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.ApiKeyResponse> GetApiKeyAsync(global::Microservice.AuthService.Protos.ApiKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApiKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// api key
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.ApiKeyResponse> GetApiKeyAsync(global::Microservice.AuthService.Protos.ApiKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetApiKey, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.ApiHashResponse CreateApiKey(global::Microservice.AuthService.Protos.CreateApiKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateApiKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.ApiHashResponse CreateApiKey(global::Microservice.AuthService.Protos.CreateApiKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateApiKey, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.ApiHashResponse> CreateApiKeyAsync(global::Microservice.AuthService.Protos.CreateApiKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateApiKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.ApiHashResponse> CreateApiKeyAsync(global::Microservice.AuthService.Protos.CreateApiKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateApiKey, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.ApiHashResponse RegenerateApiKey(global::Microservice.AuthService.Protos.ApiKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegenerateApiKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.ApiHashResponse RegenerateApiKey(global::Microservice.AuthService.Protos.ApiKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegenerateApiKey, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.ApiHashResponse> RegenerateApiKeyAsync(global::Microservice.AuthService.Protos.ApiKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegenerateApiKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.ApiHashResponse> RegenerateApiKeyAsync(global::Microservice.AuthService.Protos.ApiKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegenerateApiKey, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.ApiKeyResponse RenewApiKey(global::Microservice.AuthService.Protos.RenewApiKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RenewApiKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.ApiKeyResponse RenewApiKey(global::Microservice.AuthService.Protos.RenewApiKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RenewApiKey, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.ApiKeyResponse> RenewApiKeyAsync(global::Microservice.AuthService.Protos.RenewApiKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RenewApiKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.ApiKeyResponse> RenewApiKeyAsync(global::Microservice.AuthService.Protos.RenewApiKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RenewApiKey, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.ApiKeyResponse RevokeApiKey(global::Microservice.AuthService.Protos.ApiKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RevokeApiKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.ApiKeyResponse RevokeApiKey(global::Microservice.AuthService.Protos.ApiKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RevokeApiKey, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.ApiKeyResponse> RevokeApiKeyAsync(global::Microservice.AuthService.Protos.ApiKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RevokeApiKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.ApiKeyResponse> RevokeApiKeyAsync(global::Microservice.AuthService.Protos.ApiKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RevokeApiKey, null, options, request);
      }
      /// <summary>
      /// user info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.UserInfoResponse GetUserInfo(global::Microservice.AuthService.Protos.UserInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// user info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.UserInfoResponse GetUserInfo(global::Microservice.AuthService.Protos.UserInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserInfo, null, options, request);
      }
      /// <summary>
      /// user info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.UserInfoResponse> GetUserInfoAsync(global::Microservice.AuthService.Protos.UserInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// user info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.UserInfoResponse> GetUserInfoAsync(global::Microservice.AuthService.Protos.UserInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserInfo, null, options, request);
      }
      /// <summary>
      /// active session
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.SessionListResponse GetSessionList(global::Microservice.AuthService.Protos.SessionListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSessionList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// active session
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.SessionListResponse GetSessionList(global::Microservice.AuthService.Protos.SessionListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSessionList, null, options, request);
      }
      /// <summary>
      /// active session
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.SessionListResponse> GetSessionListAsync(global::Microservice.AuthService.Protos.SessionListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSessionListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// active session
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.SessionListResponse> GetSessionListAsync(global::Microservice.AuthService.Protos.SessionListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSessionList, null, options, request);
      }
      /// <summary>
      /// session ckeck for suspicious detection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.SessionCheckResponce SessionListCheck(global::Microservice.AuthService.Protos.SessionCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SessionListCheck(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// session ckeck for suspicious detection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.SessionCheckResponce SessionListCheck(global::Microservice.AuthService.Protos.SessionCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SessionListCheck, null, options, request);
      }
      /// <summary>
      /// session ckeck for suspicious detection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.SessionCheckResponce> SessionListCheckAsync(global::Microservice.AuthService.Protos.SessionCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SessionListCheckAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// session ckeck for suspicious detection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.SessionCheckResponce> SessionListCheckAsync(global::Microservice.AuthService.Protos.SessionCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SessionListCheck, null, options, request);
      }
      /// <summary>
      /// Session details
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.SessionDetailsResponse GetSessionDetails(global::Microservice.AuthService.Protos.SessionDetailsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSessionDetails(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Session details
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.SessionDetailsResponse GetSessionDetails(global::Microservice.AuthService.Protos.SessionDetailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSessionDetails, null, options, request);
      }
      /// <summary>
      /// Session details
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.SessionDetailsResponse> GetSessionDetailsAsync(global::Microservice.AuthService.Protos.SessionDetailsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSessionDetailsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Session details
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.SessionDetailsResponse> GetSessionDetailsAsync(global::Microservice.AuthService.Protos.SessionDetailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSessionDetails, null, options, request);
      }
      /// <summary>
      /// Session analytics overview
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.SessionAnalyticsResponse GetSessionAnalytics(global::Microservice.AuthService.Protos.SessionListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSessionAnalytics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Session analytics overview
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Microservice.AuthService.Protos.SessionAnalyticsResponse GetSessionAnalytics(global::Microservice.AuthService.Protos.SessionListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSessionAnalytics, null, options, request);
      }
      /// <summary>
      /// Session analytics overview
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.SessionAnalyticsResponse> GetSessionAnalyticsAsync(global::Microservice.AuthService.Protos.SessionListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSessionAnalyticsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Session analytics overview
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Microservice.AuthService.Protos.SessionAnalyticsResponse> GetSessionAnalyticsAsync(global::Microservice.AuthService.Protos.SessionListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSessionAnalytics, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ApiKeyClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ApiKeyClient(configuration);
      }
    }

  }
}
#endregion
